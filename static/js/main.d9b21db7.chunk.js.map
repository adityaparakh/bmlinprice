{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","realPrice","handleChange","bind","assertThisInitialized","event","setState","target","length","price","calculatePrice","receivedPrice","console","log","firstValue","midValue","A","B","C","D","E","F","0","1","2","3","4","5","6","7","8","9","react_default","a","createElement","className","Form","Group","controlId","Control","as","rows","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAiFeA,qBA3Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAO,GAAIC,UAAW,GAGpCT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IALHA,4EAQNa,GAEX,GADAV,KAAKW,SAAS,CAACN,MAAOK,EAAME,OAAOP,QACH,GAA7BK,EAAME,OAAOP,MAAMQ,OAAY,CAChC,IAAIC,EAAQd,KAAKe,eAAeL,EAAME,OAAOP,OAC7CL,KAAKW,SAAS,CAACL,UAAWQ,4CAIfE,GACbC,QAAQC,IAAIF,GACZ,IAsBIG,EAAaH,EAAc,GAC3BI,EAAWJ,EAAc,GAE7B,MAzBY,CACVK,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,KAmBMP,GAhBH,CACRQ,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,EACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,IAMwBhB,oCAM/B,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,qCAGAF,EAAAC,EAAAC,cAAA,6BAGAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAGAF,EAAAC,EAAAC,cAACE,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCACpBN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAWC,KAAK,IAAIC,SAAU/C,KAAKO,iBAGxD8B,EAAAC,EAAAC,cAAA,gCACgBvC,KAAKI,MAAME,oBArErB0C,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d9b21db7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { InputGroup, FormControl, Form } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {value: '', realPrice: 0};\n\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    if(event.target.value.length == 5){\n      var price = this.calculatePrice(event.target.value)\n      this.setState({realPrice: price})\n    }\n  }\n\n  calculatePrice(receivedPrice) {\n    console.log(receivedPrice);\n    var first = {\n      \"A\": 100,\n      \"B\": 200,\n      \"C\": 300,\n      \"D\": 400,\n      \"E\": 500,\n      \"F\": 600\n    };\n\n    var mid = {\n      \"0\": 50,\n      \"1\": 60,\n      \"2\": 70,\n      \"3\": 80,\n      \"4\": 90,\n      \"5\": 0,\n      \"6\": 10,\n      \"7\": 20,\n      \"8\": 30,\n      \"9\": 40\n    };\n\n    var firstValue = receivedPrice[0];\n    var midValue = receivedPrice[2];\n\n    return first[firstValue] + mid[midValue];\n  }\n\n\n\n  render() {\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p>\n              BM LIN Pricing made easy\n            </p>\n            <label>\n              Input Price:\n            </label>\n            <div>\n              <p>\n              </p>\n\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control as=\"textarea\" rows=\"3\" onChange={this.handleChange} />\n              </Form.Group>\n            </div>\n            <label>\n              Real Price: Â¥{this.state.realPrice}\n            </label>\n          </header>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}